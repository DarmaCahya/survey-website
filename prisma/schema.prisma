generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int            @id @default(autoincrement())
  email           String         @unique
  passwordHash    String
  name            String?
  isActive        Boolean        @default(true)
  refreshToken    String?        @unique
  refreshTokenExp DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  draftSurveys    DraftSurvey[]
  formProgress    FormProgress[]
  responses       Response[]
  submissions     Submission[]

  @@map("users")
}

model Response {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  answers   Json
  userId    Int?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])

  @@map("responses")
}

model Asset {
  id           Int            @id @default(autoincrement())
  name         String
  description  String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  formProgress FormProgress[]
  submissions  Submission[]
  threats      Threat[]

  @@map("assets")
}

model Threat {
  id                      Int                     @id @default(autoincrement())
  assetId                 Int
  name                    String
  description             String?
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  submissions             Submission[]
  threatBusinessProcesses ThreatBusinessProcess[]
  asset                   Asset                   @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@map("threats")
}

model BusinessProcess {
  id                      Int                     @id @default(autoincrement())
  name                    String
  description             String?
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  threatBusinessProcesses ThreatBusinessProcess[]

  @@map("business_processes")
}

model ThreatBusinessProcess {
  threatId          Int
  businessProcessId Int
  explanation       String?
  businessProcess   BusinessProcess @relation(fields: [businessProcessId], references: [id], onDelete: Cascade)
  threat            Threat          @relation(fields: [threatId], references: [id], onDelete: Cascade)

  @@id([threatId, businessProcessId])
  @@map("threat_business_processes")
}

model FormProgress {
  userId    Int
  assetId   Int
  status    FormStatus @default(NOT_STARTED)
  updatedAt DateTime   @updatedAt
  asset     Asset      @relation(fields: [assetId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, assetId])
  @@map("form_progress")
}

model Submission {
  id          Int             @id @default(autoincrement())
  userId      Int
  assetId     Int
  threatId    Int
  understand  UnderstandLevel
  submittedAt DateTime        @default(now())
  feedback    Feedback[]
  riskInput   RiskInput?
  score       Score?
  asset       Asset           @relation(fields: [assetId], references: [id], onDelete: Cascade)
  threat      Threat          @relation(fields: [threatId], references: [id], onDelete: Cascade)
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, assetId, threatId])
  @@map("submissions")
}

model RiskInput {
  submissionId Int        @id
  f            Int
  g            Int
  h            Int
  i            Int
  submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@map("risk_inputs")
}

model Score {
  submissionId      Int          @id
  peluang           Float
  impact            Float
  total             Int
  category          RiskCategory
  threatDescription Json?
  submission        Submission   @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@map("scores")
}

model Feedback {
  id           Int        @id @default(autoincrement())
  submissionId Int
  field        String
  message      String
  createdAt    DateTime   @default(now())
  submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@map("feedback")
}

model DraftSurvey {
  userId       Int
  formId       Int
  answers      Json
  currentIndex Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, formId])
  @@map("draft_surveys")
}

enum FormStatus {
  NOT_STARTED
  IN_PROGRESS
  SUBMITTED

  @@map("form_status")
}

enum RiskCategory {
  LOW
  MEDIUM
  HIGH

  @@map("risk_category")
}

enum UnderstandLevel {
  MENGERTI
  TIDAK_MENGERTI

  @@map("understand_level")
}