name: Deploy to VPS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  # Build and Test
  build-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Generate Prisma Client
      run: npx prisma generate

    - name: Run linting
      run: npm run lint

    - name: Run type check
      run: npx tsc --noEmit

    - name: Build application
      run: npm run build
      env:
        NODE_ENV: production

  # Deploy to VPS
  deploy:
    needs: build-test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        password: ${{ secrets.VPS_PASSWORD }}
        port: 22
        script: |
          # Navigate to project directory
          cd /var/www/survey-web || { echo "Directory not found, creating..."; sudo mkdir -p /var/www/survey-web; sudo chown ubuntu:ubuntu /var/www/survey-web; cd /var/www/survey-web; }
          
          # Pull latest code
          git pull origin main
          
          # Stop existing containers
          docker compose -f docker-compose.prod.yml down || true
          
          # Remove old images to save space
          docker image prune -f || true
          
          # Build and start services with production config
          docker compose -f docker-compose.prod.yml up --build -d
          
          # Wait for services to be healthy
          echo "Waiting for services to start..."
          sleep 30
          
          # Health check
          echo "Performing health check..."
          curl -f http://localhost:3000/api/health || { echo "Health check failed!"; exit 1; }
          
          # Show running containers
          docker compose -f docker-compose.prod.yml ps
          
          echo "‚úÖ Deployment completed successfully!"
          echo "üåê Application available at: http://43.173.30.94:3000"
