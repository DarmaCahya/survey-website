name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read
  packages: write

jobs:
  # Build and Test Job
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Generate Prisma Client
      run: npx prisma generate

    - name: Run linting
      run: npm run lint

    - name: Run type check
      run: npx tsc --noEmit

    - name: Build application
      run: npm run build
      env:
        NODE_ENV: production

  # Build Docker Image Job
  build-docker:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        provenance: false
        sbom: false

  # Deploy to VPS Job
  deploy:
    needs: build-docker
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        password: ${{ secrets.VPS_PASSWORD }}
        port: 22
        script: |
          #!/bin/bash
          set -e
          
          echo "=== Starting Deployment ==="
          
          # Check if Docker is installed
          if ! command -v docker &> /dev/null; then
            echo "Docker not found. Please install Docker first."
            echo "Run: curl -fsSL https://get.docker.com -o get-docker.sh && sudo sh get-docker.sh"
            exit 1
          fi
          
          # Setup project directory
          PROJECT_DIR="/var/www/survey-web"
          if [ ! -d "$PROJECT_DIR" ]; then
            echo "Creating project directory..."
            sudo mkdir -p "$PROJECT_DIR"
            sudo chown $USER:$USER "$PROJECT_DIR"
          fi
          
          cd "$PROJECT_DIR"
          
          # Clone or pull repository
          if [ ! -d ".git" ]; then
            echo "Cloning repository..."
            git clone https://github.com/${{ github.repository }}.git .
          else
            echo "Pulling latest changes..."
            git pull origin main
          fi
          
          # Login to GitHub Container Registry
          echo "Logging in to GitHub Container Registry..."
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Stop existing containers
          echo "Stopping existing containers..."
          docker compose down || true
          
          # Pull latest image
          echo "Pulling latest Docker image..."
          docker compose pull
          
          # Start services
          echo "Starting services..."
          docker compose up -d
          
          # Wait for services
          echo "Waiting for services to start..."
          sleep 10
          
          # Health check with retry
          echo "Running health check..."
          for i in {1..30}; do
            if curl -f http://localhost:3000/api/health &> /dev/null; then
              echo "✅ Health check passed!"
              echo "=== Deployment completed successfully! ==="
              exit 0
            fi
            echo "Waiting for service to be ready... ($i/30)"
            sleep 2
          done
          
          echo "❌ Health check failed after 60 seconds"
          docker compose logs --tail=50
          exit 1

  # Cleanup Job
  cleanup:
    needs: [build-docker, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Clean up old images
      run: |
        echo "Cleaning up old Docker images..."
        # This will be handled by the VPS cleanup script
